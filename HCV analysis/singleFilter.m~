%% Perform Snyder filtering for multi-variable N(t) on real data - no N

% Assumptions and Modifications
% - NEED TO ACCOUNT FOR DUPLICATE TIMES
% - calculation of tcoal using loops, hopefully a correction
% - removed plots including N and lam as no such values with real data
% - modified from batchMV2 to use real fasta sequence data
% - removed sinusoidal uniform sampling code
% - removed minSpace and maxSpace as cells of all fns to single fn arrays
% - the tn time vector is not uniformly sampled and has repetitions
% - added code to calculate a matrix of identifiers for function calling
% - removed product calculation on parameter estimates
% - uses x notation and expects certain functional forms
% - added repeatability for M runs
% - assumes appropriate data provided
% - used rejection sampling to simulate NHPP
% - the data is k-coalescent times and the process self-exciting

clc
close all
clear all

% Booleans to control functionality and tree
tic;
plotindiv = 1;
getTree = 0;

% Functional forms
fnid = 5;
global fnstr;
fnstr = {'x_1e^-x_2t', 'x_1sin(x_2t + x_3) + x_4', 'x_1',...
    'logistic growth', 'piecewise exponential'};
fnstr4 = 'x_1(1 + e^(-x_2x_3))/(1 + e^(-x_2(x_3 - t)) + x_4';
fnstr5 = 'x_1I(x_3) + x_1e^(-x_2(t - x_3)I(x_3, x_4) + x_1e^(-x_2(x_4 - x_3)I(x_4)';
numRVset = [2 4 1 4 4];

%% Extract n and the coalescent times from real fasta data

% Mutation rate clock and data from Pybus 2003
mu = 0.79*(10^-3);
name = 'result63.fasta';
% Main code to draw out coalescent data
[tcoal, twait, trees, n, evDist, dcomp] = getCoalFasta(mu, name);
if getTree
    % Sequence tree
    phytreeviewer(trees.treeSeq);
    % Coalescent time tree
    phytreeviewer(trees.treeCoal);
end


%% Parameter settings

% Set number of parameters, dimensions (mi) ad data length
mi = [15 15 15 15];
numRV = length(mi);
nData = n-1;
m = prod(mi);

% Check for pre-specified parameters not to be estimated - mi values of 1
specParam = find(mi == 1);
nEstRV = numRV - length(specParam);

% Get coalescent binomial factors for lineages and change notation
nset = n:-1:2;
fac = nset.*(nset-1)/2;

% Space sets for functions
switch(fnid)
    case 1
        % Exponential
        minSpace = [100*n 0.1];
        maxSpace = [1000*n 10];
    case 2
        % Sinusoidal
        minSpace = [100*n 0.1 0 1100*n];
        maxSpace = [1000*n 10 pi/2 1200*n];
    case 3
        % Constant
        minSpace = 100*n;
        maxSpace = 1000*n;
    case 4
        % Logistic
        minSpace = [1000 0 50 50];
        maxSpace = [10000 10 max(tcoal) 500];
    case 5
        % Pybus piecewise exponential
        minSpace = [5000 0 0 60];
        maxSpace = [20000 0.75 60 200];
end

% Modify spaces if specify parameters so that they are set to min values
if nEstRV > 0
    minSpace(specParam) = maxSpace(specParam);
end

% Function identifier structure
fn.id = fnid;
fn.name = fnstr(fnid);
fn.nData = nData;
fn.mi = mi;
fn.m = m;
fn.fac = fac;
fn.numRV = numRV;
fn.nEstRV = nEstRV;

%% Initialise and define key parameters and storage variables

% Check numRV compatible with fntype
if numRV ~= numRVset(fnid)
    error('Initial settings on RV space inconsistent');
end

% Set uniform prior q0
q0 = ones(1, m)/m;

% Get the random variable sets
xset = cell(1, 1);
for i = 1:numRV
    xset{i} = linspace(minSpace(i), maxSpace(i), mi(i));
end
fn.xset = xset;

% Create a matrix of identifiers to tell which xset{i} values are used for
% each entry in N(t) and lam(t) calculations
IDMx = zeros(numRV, m);
% Initialise with first variable which has no element repetitions
idxset = 1:mi(1);
IDMx(1, :) = repmat(idxset, 1, m/mi(1));
for i = 2:numRV
    % For further variables numReps gives the number of set repetitions
    % while kronVec gives the number of element repetitions
    idxset = 1:mi(i);
    numReps = m/prod(mi(1:i));
    kronVec = ones(1, prod(mi(1:i-1)));
    IDMx(i, :) = repmat(kron(idxset, kronVec), 1, numReps);
end

% Get the values corresponding to the matrix
xsetMx = zeros(numRV, m);
for i = 1:numRV
    xsetMx(i, :) = xset{i}(IDMx(i, :));
end
fn.IDMx = IDMx;
fn.xsetMx = xsetMx;


%% Filter the coalescent times from the fasta data

% Main function to perform Snyder estimation and return MMSE estimates
[xhat, Nhat, lamhat, tn, nLin, statsStruc, qn] = snyderRealData(fn, q0, tcoal);
tnmin = min(tn);
tnmax = max(tn);
tnlen = length(tn);
paramhat = xhat(end, :)';
fn.paramhat = paramhat;

% Extract outputs
xhatmean = statsStruc.xhatmean;
xstdlb = statsStruc.xstdlb;
xstdub = statsStruc.xstdub;

% Calculate a smooth function based on final value of parameters - pretend
% these are true values
t = linspace(tcoal(1), tcoal(end), 1000);
[Nt, ~] = getTimeVaryingN(fn, t, 1, paramhat);

% Marginalise the posterior across sim times - take 20 of them
nPoster = 20;
idpost = round(linspace(1, length(tn), nPoster));
qmarg = cell(1, nPoster);
probSums = cell(1, nPoster);
for i = 1:nPoster
    [qmarg{i}, probSums{i}] = marginalise(numRV, IDMx, qn(idpost(i), :), mi);
end
qnlast = qn(end, :);
clear qn

% Reorganise into probability matrices for each variable
qnp = cell(1, numRV);
for i = 1:numRV
    qnp{i} = zeros(nPoster, mi(i));
    for j = 1:nPoster
        qnp{i}(j, :) = qmarg{j}{i};
    end
end

% Reproduce Pybus2003 plot with time reorder and confidence intervals
if fnid == 5
    % Get other parameters of interest
    pm = [paramhat; 0];
    pm(5) = paramhat(1)*exp(-paramhat(2)*(paramhat(4) - paramhat(3)));
    infR = pm(1)/pm(5);
    
    % Get time in years and reorder so towards the present 
    tpres = 1995;
    maxPast = tcoal(end);
    tz = linspace(tpres-maxPast, tpres, 1000);
    tpast = 1895;
    
    % Get piecewise population with reordered time using Pybus notation
    x = tpres - pm(3);
    y = tpres - pm(4);
    NA = pm(5);
    NC = pm(1);
    r = pm(2);
    
    % Indicator functions and population with exponential growths by
    % accounting for interchange of x ans y and NC and NA
    I1 = tz >= x;
    I2 = tz > y & tz < x;
    I3 = tz <= y;
    % The middle term is re-expressed in terms of NA and the y and x after
    % appropriate subtraction are interchanged
    Nz = NC.*I1 + NA.*exp(-r.*(y - tz)).*I2 + ...
        NA.*I3;
    
    % Use std deviations of parameters to set a region of confidence based
    % on r, NC, x and y since only 4 parameters independent
    qz = qmarg{end};
    vz = zeros(1, numRV);
    for i = 1:numRV
        vz(i) = qz{i}*(xset{i}.^2)' - (qz{i}*xset{i}').^2;
    end
    % Twice the standard deviation used in bounds - but highest value of
    % all params does not => highest Nz hence the explicit forming of xup
    sz = 2*sqrt(vz);
    pmup = [pm(1)+sz(1) pm(2)-sz(2) pm(3)+sz(3) pm(4)+sz(4)];
    pmdown = [pm(1)-sz(1) pm(2)+sz(2) pm(3)-sz(3) pm(4)-sz(4)];
    
%     % Get worst case parameter values
%     x1 = tpres - pmdown(3);
%     x2 = tpres - pmup(3);
%     y1 = tpres - pmdown(4);
%     y2 = tpres - pmup(4);
%     r1 = pmdown(2);
%     r2 = pmup(2);
%     NC1 = pmdown(1);
%     NC2 = pmup(1);
%     % Min NA has longest exp time and quickest rate and smallest NC
%     NA1 = pmdown(1)*exp(-pmup(2)*(pmup(4) - pmdown(3)));
%     NA2 = pmup(1)*exp(-pmdown(2)*(pmdown(4) - pmup(3)));
%     
%     % Get corresponding lower N(t) bound - longest x, smallest r, smallest
%     % y and smallest NC and NA
%     I1a = tz >= x1;
%     I2a = tz > y & tz < x1;
%     I3a = tz <= y;
    
    % PAT treatment period
    patx = [1920 1920 1980 1980];
    paty = [NA NC NC NA];
end

%% Visualise data - no MSE calculation possible

% Plot best suboptimal N (assuming last value is best parameter value)
figure;
semilogy(t, Nt, 'k', 'LineWidth', 2, tn, Nhat, 'r:');
xlabel('time');
ylabel(['N(t) = ' fn.name]);
title(['N(t) final estimate for [n m #params] = [' num2str(n) ' ' num2str(m) ' ' num2str(numRV) ']']);
xlim([tnmin tnmax]);
    
% Plot the N estimates and coalescent rate lambda
if plotindiv
    % The coalescent rate which includes lineages
%     figure;
%     semilogy(tn, lamhat);
%     xlabel('time');
%     ylabel('\lambda(x, t)');
%     title(['Rate estimate for [n m #params] = [' num2str(n) ' ' num2str(m) ' ' num2str(numRV) ']']);
%     xlim([tnmin tnmax]);
    
    % The population function
    figure;
    semilogy(tn, Nhat);
    xlabel('time');
    ylabel(['N(t) = ' fn.name]);
    title(['N(t) estimate for [n m #params] = [' num2str(n) ' ' num2str(m) ' ' num2str(numRV) ']']);
    xlim([tnmin tnmax]);
    
    % The parameters estimated and the std deviation bounds
    figure;
    for i = 1:numRV
        subplot(numRV, 1, i);
        plot(tn, xhatmean(:, i), 'k', tn, xstdlb(:, i),...
            'b', tn, xstdub(:, i), 'b');
        xlabel('time');
        ylabel(['x_' num2str(i) ' in N(t) =' fn.name]);
        title(['Estimate of x_' num2str(i) 'for [n m] = [' num2str(n) ' ' num2str(m) ']']);
        legend('estimate', '-2 std', '+2 std', 'location', 'best');
        xlim([tnmin tnmax]);
    end
    
    % Plot number of lineages across time
    figure;
    stairs(tn, nLin);
    xlabel('time');
    ylabel('no. of lineages');
    title('Number of lineages with time');
    xlim([tnmin tnmax]);
    
    % Posteriors and final estimates
    figure;
    for i = 1:numRV
        subplot(numRV, 1, i);
        plot(xset{i}, qnp{i}(1, :), 'b', xset{i}, qnp{i}(end, :), 'k',...
            xset{i}, qnp{i}(2:end-1, :), 'g--');
        hold on
        plot([paramhat(i) paramhat(i)], [0 max(max(qnp{i}))], 'k');
        hold off
        xlim([min(xset{i}) max(xset{i})]);
        xlabel(['x_' num2str(i)]);
        ylabel(['P(x_' num2str(i) '|data)']);
        legend('prior', 'posterior', 'intermediates', 'location', 'best');
        title(['Evolution of posteriors: param est = ' num2str(paramhat(i))]);
    end
    
    % Pybus2003 plot type
    if fnid == 5
        figure;
        fill(patx, paty, 'c:');
        hold on
        plot(tz, Nz, 'k', 'LineWidth', 2);

        hold off
        xlim([tpast-100 tpres]);
        xlabel('year');
        ylabel('estimated effective number of infections');
    end
end

% Clock time set to minutes
tIter = toc;
tIter = tIter/60;
disp(['Simulation time is ' num2str(tIter(end))]);
disp('********************************************************************');
for i = 1:numRV
    disp(['Estimate x_' num2str(i) ' = ' num2str(paramhat(i))]);
end
if fnid == 5
    % Additional dependent parameter calculated and ratio of infections
    disp(['Estimate x_5 = ' num2str(pm(5))]);
    disp(['Infection ratio = ' num2str(infR)]);
    disp(['Length of exponential growth = ' num2str(pm(4) - pm(3))]);
end
    
% Store individual run removing heavy, unneeded variables
save(['real_' num2str(numRV)], 'fn', 'nLin', 'tn', 'lamhat', 'Nhat', 'statsStruc', 'tIter', 'tcoal');